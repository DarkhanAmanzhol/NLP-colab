# -*- coding: utf-8 -*-
"""summarization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1phVXnsxU1N1l4OAmVQNp-eDgxR_ppx-L
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import confusion_matrix,classification_report
import nltk
from string import punctuation
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize
import heapq  
import string
import re
import pickle
import numpy as np

def language_detect(text):

    punctuations_table = dict((ord(char), None) for char in string.punctuation)
    
    global LdLangDetectModel
    ldLangDetectFile = open('lang_det_model.pckl', 'rb')
    LdLangDetectModel = pickle.load(ldLangDetectFile)
    ldLangDetectFile.close()
    
    text = " ".join(text.split())
    text = text.lower()
    text = re.sub(r"\d+", "", text)
    text = text.translate(punctuations_table)
    pred = LdLangDetectModel.predict([text])
    prob = LdLangDetectModel.predict_proba([text])
    return pred[0]

def nltk_summarizer(raw_text, percentage):
    language = language_detect(raw_text)
    #print('Your text is written in 'language)
    stopWords = set(stopwords.words(f"{language}"))
    word_frequencies = {}  
    for word in nltk.word_tokenize(raw_text.lower()):  
        if word not in stopWords:
            if word not in punctuation:
                if word not in word_frequencies.keys():
                    word_frequencies[word] = 1
                else:
                    word_frequencies[word] += 1

    maximum_frequency = max(word_frequencies.values())
    print(word_frequencies)
    
    for word in word_frequencies.keys():  
        word_frequencies[word] = (word_frequencies[word]/maximum_frequency)

    sentence_list = nltk.sent_tokenize(raw_text)
    print(sentence_list)
    sentence_scores = {}  
    for sent in sentence_list:  
        for word in nltk.word_tokenize(sent.lower()):
            if word not in punctuation:
                if word in word_frequencies.keys():
                    if len(sent.split(' ')) < 30:
                        if sent not in sentence_scores.keys():
                            sentence_scores[sent] = word_frequencies[word]
                        else:
                            sentence_scores[sent] += word_frequencies[word]

    length_perc = int(len(sentence_list) * (percentage / 100))

    summary_sentences = heapq.nlargest(length_perc, sentence_scores, key=sentence_scores.get)

    summary = ' '.join(summary_sentences)  
    return summary

text = 'NLTK provides "bvc zx" a plethora of algorithms to choose from for a particular problem which is boon for a researcher but a bane for a developer. Whereas, spaCy keeps the best algorithm for a problem in its toolkit and keep it updated as state of the art improves.NLTK supports various languages whereas spaCy have statistical models for 7 languages (English, German, Spanish, French, Portuguese, Italian, and Dutch). It also supports named entities for multi language.NLTK is a string processing library. It takes strings as input and returns strings or lists of strings as output. Whereas, spaCy uses object-oriented approach. When we parse a text, spaCy returns document object whose words and sentences are objects themselves.'

text = 'Туған жер – адам өмірінде ең үлкен орын алады. Нақты осы жер оны елімен, өткенмен және болашақпен байланыстырады. Міне, сондықтан да тіпті балалық шақтан бастап-ақ адамда отанға деген махаббат сезімі оянады. Әрбіріміз үшін Отан ошақ басынан басталады: мен үшін туған ауыл. Менің Отаным кішкентай болса да, мен үшін қымбат жер Қызылөзен селосынан басталады. Дәл осы жерде менің көңілді де, шаттықты, уайымсыз балалалық шағым өтті. Сол кезде ол маған өте үлкен болып көрінетін . Мұнда көлік сирек жүретін, бірақ теңіз жағасында серуендеп жүретін адамдар көп болатын.. Қазір үлкейдім, бірақ та өмір бойы мен үшін балалық шақтағы туған аула мен көше – менің кішкентай Отаным. Сонымен бірге мен елімнің бір бөлшегімін, оның бүгіні мен болашағымын.'

